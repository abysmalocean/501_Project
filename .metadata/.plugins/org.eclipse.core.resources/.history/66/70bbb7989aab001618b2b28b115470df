package vcu.cs531.Project;

import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;

public class Graph {
	
	private HashSet<Vertex> VertexRoster = new HashSet<Vertex>();
	private ParamaterClass Patamater = null;
	private double[][] graphFlowMatrix = null;
	private int hight;
	private int width;
	private int totalV;
	
	int[] distance;
	int[] parents ;
	int[] visitHistory; 
	
	private Vertex Source;
	private Vertex Target;
	
	private LinkedList<Integer> path = new LinkedList<Integer>();
	
	public Graph(HashSet<Vertex> InVertexRoster,ParamaterClass InPatamater)
	{
		this.VertexRoster = InVertexRoster;
		this.Patamater = InPatamater;
		this.hight = Patamater.hight;
		this.width = Patamater.width;
		this.totalV = this.hight * this.width;
		
		if(graphFlowMatrix == null)
		{
			graphFlowMatrix = new double[this.hight][this.width];
		}
		BuildSource();
		Buildtarget();
		BFS();
		
	}
	
	public Vertex BuildSource()
	{ 
		this.Source = new Vertex(this.Patamater);
		this.Source.SetID(-1);
		this.Source.SetXY(-1,-1);
	    for(int i = 0; i < this.Patamater.hight;i ++)
	    {	
	    	for(int j = 0; j < this.Patamater.width; j ++)
	    	{
	    		double temp = ProjectHelper.VertexSearch(i,j,this.Patamater,this.VertexRoster).getPF();
	    		this.Source.setPijSource(i, j, temp);
	    	}
		}
	    this.VertexRoster.add(this.Source);
	    System.out.println("Source addjencent list is " + this.Source.addjlist.size());
		return this.Source;
		
	}
	
	public Vertex Buildtarget()
	{
		this.Target = new Vertex(this.Patamater);
		this.Target.SetID(-2);
		this.Target.SetXY(-1,-1);
	    for(int i = 0; i < this.Patamater.hight;i ++)
	    {	
	    	for(int j = 0; j < this.Patamater.width; j ++)
	    	{
	    		Vertex tempvertex = ProjectHelper.VertexSearch(i,j,this.Patamater,this.VertexRoster);
	    		tempvertex.addtargetToAddjList(this.Target);
	    		double temp = tempvertex.getPB();
	    		this.Target.setPijSource(i, j, temp);
	    	}
		}
	    this.VertexRoster.add(this.Target);
	    System.out.println("Target addjencent list is " + this.Target.addjlist.size());
	    //System.out.println(this.Patamater.bg255);
	    //System.out.println(this.Patamater.fg255);
		return this.Target;
		
	}
	public void makePath(int s, int v)
	{
		if(v == s)
		{
			this.path.add(s);
		}else if(this.parents[v] == -1)
		{
			System.out.println("no route");
		}else
		{
			makePath(s,this.parents[v]);
		}
	}
	
	public LinkedList<Integer> BFSGetPath()
	{
		return path;
		
	}
	
	public int BFS()
	{
		//+2 add source and target
		// Source id is vertex.id = -1 but the index is totalV +1
		this.distance = new int[this.totalV+2];
		this.parents  = new int[this.totalV+2];
		this.visitHistory = new int[this.totalV+2];
		// 0 means not visited, 1 means visited before
		for(int i = 0; i < this.totalV+2; i++)
		{
			this.distance[i] = 100000;
			this.parents[i]  = -1;
			this.visitHistory[i] = 0;
		}
		Queue<Integer> queue = new LinkedList<Integer>();
		queue.offer(-1);
		Vertex tempVertex = null;
		
		// Source distance is 0
		this.distance[this.totalV+1] = 0;
		this.visitHistory[this.totalV+1] = 1;
		
		while(!queue.isEmpty())
		{
			//System.out.print("LiangXU\n");
			tempVertex = null;
			int current = queue.remove();
			//get the vertex in the list
			System.out.println("Current is " + current);
			if(current == -1)
			{
				// -1 is the Source
				tempVertex = this.Source;
				current = this.totalV + 1;
				//System.out.print("LiangXU\n");
				//System.out.println("tempVertex.addjlist.size() -- >" + tempVertex.getID());
				
				
			}else if( current == -2 )
			{
				// -2 is the Target
				tempVertex = this.Target;
				current = this.totalV + 2;
				System.out.print("Found Shortest path\n");
				return 0;
			}else
			{
				tempVertex = ProjectHelper.VertexSearch_ById(current,this.Patamater,this.VertexRoster);
				tempVertex.Print();
				
			}
			System.out.println("tempVertex.addjlist.size() -- >" + tempVertex.addjlist.size());
			
			for(int i = 0; i < tempVertex.addjlist.size(); i++)
			{
				int tempid = tempVertex.addjlist.get(i).id;
				
				if(tempid == -2)
				{
					// target found
					this.distance[this.totalV+1] = distance[current] + 1;
					this.parents[this.totalV+1] = current;
					return 0;
				}
						
				if(this.distance[tempid]==100000)
				{	
					//System.out.println("");
					//Not visit before
					this.distance[tempid] = distance[current] + 1 ;
					this.parents[tempid]  = current;
					queue.offer(tempid);
				}
			}
		}
		
		return 1;
	}

}
